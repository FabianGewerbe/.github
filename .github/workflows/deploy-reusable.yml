name: build-and-deploy

on:
  workflow_call:
    inputs:
      domain_suffix:
        required: true
        type: string
      port:
        required: false
        type: string
        default: '8080'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DOMAIN_SUFFIX: ${{ inputs.domain_suffix }}
      APP_PORT:      ${{ inputs.port }}

    steps:
      # ── 1. checkout ───────────────────────────────────────────────
      - uses: actions/checkout@v4

      # ── 2. buildx + login ─────────────────────────────────────────
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" |
            docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ── 3A. build & push BACKEND image ────────────────────────────
      - name: Build & push backend
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          APP_LC=$(basename "$REPO_LC")
          BE_IMAGE="ghcr.io/${REPO_LC}:${{ github.sha }}"
          docker build -t "$BE_IMAGE" backend-api
          docker push "$BE_IMAGE"
          echo "BE_IMAGE=$BE_IMAGE" >> $GITHUB_ENV
          echo "REPO_LC=$REPO_LC"   >> $GITHUB_ENV
          echo "APP_LC=$APP_LC"     >> $GITHUB_ENV

      # ── 3B. build & push FRONTEND image ───────────────────────────
      - name: Build & push frontend
        run: |
          FE_IMAGE="ghcr.io/${{ env.REPO_LC }}/frontend:latest"
          docker build -t "$FE_IMAGE" frontend-app
          docker push "$FE_IMAGE"
          echo "FE_IMAGE=$FE_IMAGE" >> $GITHUB_ENV

      # ── 4.   SSH to VPS & (re)start containers ────────────────────
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1
        with:
          host:      ${{ secrets.SSH_HOST }}
          username:  root
          key:       ${{ secrets.SSH_KEY }}
          script: |
            set -e
            APP="${{ env.APP_LC }}"
            DIR="/srv/apps/$APP"

            mkdir -p "$DIR"

            cat > "$DIR/docker-compose.yml" <<EOF
            version: '3.9'
            services:
              ${APP}-api:
                image: ${{ env.BE_IMAGE }}
                restart: unless-stopped
                labels:
                 - traefik.http.routers.${APP}-api.rule=Host(\`${APP}-api.${{ env.DOMAIN_SUFFIX }}\`)
                 - traefik.http.services.${APP}-api.loadbalancer.server.port=${{ env.APP_PORT }}

              ${APP}-web:
                image: ${{ env.FE_IMAGE }}
                restart: unless-stopped
                labels:
                 - traefik.http.routers.${APP}-web.rule=Host(\`${APP}-web.${{ env.DOMAIN_SUFFIX }}\`)
                 - traefik.http.services.${APP}-web.loadbalancer.server.port=80
            EOF

            docker compose -f "$DIR/docker-compose.yml" pull
            docker compose -f "$DIR/docker-compose.yml" up -d --remove-orphans
            docker image prune -f --filter "until=24h"
